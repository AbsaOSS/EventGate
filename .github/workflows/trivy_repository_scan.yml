name: Trivy Full Repository Scan

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  trivy:
    name: Trivy Full Repository Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.4

      - name: Run Trivy filesystem scan
        run: |
          trivy fs . \
            --format sarif \
            --scanners vuln,secret,misconfig,license \
            --output trivy_repository_report.sarif

      - name: Upload SARIF to GitHub Security Hub
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: trivy_repository_report.sarif

      - name: Create scan summary table
        id: scan_summary_table
        run: |
          python <<'PY'
          import os
          import json
          import sys
          from collections import defaultdict, Counter
      
          SARIF_PATH = "trivy_repository_report.sarif"
          SEVERITIES = ["CRITICAL", "HIGH", "MEDIUM", "LOW"]
          CATEGORIES = ["vulnerability", "secret", "misconfiguration", "license"]
      
          try:
              # Parse results from SARIF
              with open(SARIF_PATH, "r", encoding="utf-8") as f:
                  sarif = json.load(f)
      
              # Validate SARIF structure
              if "runs" not in sarif or not sarif["runs"]:
                  raise ValueError("SARIF file contains no runs")
      
              run = sarif["runs"][0]
              if "tool" not in run or "driver" not in run["tool"]:
                  raise ValueError("SARIF structure missing expected tool/driver keys")
      
              rules = run["tool"]["driver"].get("rules", [])
              results = run.get("results", [])
              category_severity_counts = defaultdict(Counter)
      
          except (IOError, json.JSONDecodeError, KeyError, ValueError) as e:
              print(f"Error processing SARIF file: {e}", file=sys.stderr)
              sys.exit(1)
      
          # Count results by category and severity
          for res in results:
              try:
                  rule_idx = res.get("ruleIndex")
                  if rule_idx is None or rule_idx >= len(rules):
                      continue
                  rule = rules[rule_idx]
                  tags = rule.get("properties", {}).get("tags", [])
                  # Find category and severity
                  category = next((c for c in CATEGORIES if c in tags), None)
                  severity = next((s for s in SEVERITIES if s in tags), None)
                  if category and severity:
                      category_severity_counts[category][severity] += 1
              except (KeyError, IndexError, TypeError) as e:
                  print(f"Warning: Error processing result: {e}", file=sys.stderr)
                  continue
      
          # Build Markdown summary table
          headers = ["TRIVY"] + SEVERITIES + ["Total"]
          summary_table = "| " + " | ".join(headers) + " |\n"
          summary_table += "|---|---|---|---|---|---|\n"
      
          # Rows with counts for each category
          total_severity = Counter()
          total_all = 0
          for category in CATEGORIES:
              row = [category]
              category_total = 0
              for severity in SEVERITIES:
                  count = category_severity_counts[category][severity]
                  row.append(str(count))
                  total_severity[severity] += count
                  category_total += count
              row.append(str(category_total))
              total_all += category_total
              summary_table += "| " + " | ".join(row) + " |\n"
      
          total_row = ["**➡️ Total**"] + [f"**{str(total_severity[sev])}**" for sev in SEVERITIES] + [f"**{str(total_all)}**"]
          summary_table += "| " + " | ".join(total_row) + " |"
          
          # Set summary table output
          try:
              if "GITHUB_OUTPUT" in os.environ:
                with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
                  f.write("table<<EOF\n")
                  f.write(summary_table + "\n")
                  f.write("EOF\n")
              else:
                  print("Warning: GITHUB_OUTPUT not set", file=sys.stderr)
          
          except IOError as e:
              print(f"Error writing output: {e}", file=sys.stderr)
              sys.exit(1)
          PY

      - name: GitHub scan summary comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const link = `https://github.com/${context.repo.owner}/${context.repo.repo}/security/code-scanning?query=pr%3A${context.issue.number}+is%3Aopen`;
            const sentence = `Trivy has completed a full security repository scan ✅ You can find the analysis results for this PR branch on [this overview](${link}).\n Below is the summary of the findings:`;
            const summaryTable = `${{ steps.scan_summary_table.outputs.table }}`;
            const body = `${sentence}\n\n${summaryTable}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
