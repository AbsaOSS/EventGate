name: Trivy Full Repository Scan

on:
  workflow_dispatch:
  pull_request:
    types: [ opened, synchronize ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  trivy:
    name: Trivy Full Repository Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.4

      - name: Run Trivy filesystem scan
        run: |
          trivy fs . \
            --format sarif \
            --scanners vuln,secret,misconfig,license \
            --output trivy_repository_report.sarif

      - name: Upload SARIF to GitHub Security Hub
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: trivy_repository_report.sarif

      - name: Create scan summary table
        id: scan_summary_table
        run: |
          python <<'PY'
          import os
          import json
          from collections import Counter
          
          SARIF_PATH = "trivy_repository_report.sarif"
          SEVERITIES = ["CRITICAL", "HIGH", "MEDIUM", "LOW"]
          
          # Parse results from SARIF
          with open(SARIF_PATH, "r", encoding="utf-8") as f:
              sarif = json.load(f)
          run = sarif["runs"][0]
          rules = run["tool"]["driver"]["rules"]
          results = run["results"]
          counts = Counter()
          
          # Count results by severity
          for res in results:
              rule = rules[res["ruleIndex"]]
              tags = rule["properties"]["tags"]
              sev = next((s for s in SEVERITIES if s in tags), None)
              if sev:
                  counts[sev] += 1
          
          headers = SEVERITIES + ["TOTAL"]
          values = [str(counts.get(s, 0)) for s in SEVERITIES]
          total = sum(counts.get(s, 0) for s in SEVERITIES)
          values.append(str(total))
      
          # Build Markdown summary table
          summary_table = "| " + " | ".join(headers) + " |\n"
          summary_table += "|" + "|".join(["---"] * len(headers)) + "|\n"
          summary_table += "| " + " | ".join(values) + " |"
          
          # Set output
          if "GITHUB_OUTPUT" in os.environ:
            with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as f:
              f.write("table<<EOF\n")
              f.write(summary_table + "\n")
              f.write("EOF\n")
          PY

      - name: GitHub scan summary comment
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const link = `https://github.com/${context.repo.owner}/${context.repo.repo}/security/code-scanning?query=pr%3A${context.issue.number}+is%3Aopen`;
            const sentence = `Trivy has completed a full security repository scan âœ…\n You can find the analysis results for this PR branch on [this overview](${link}).\n Below is the summary of the findings:`;
            const summaryTable = `${{ steps.scan_summary_table.outputs.table }}`;
            const body = `${sentence}\n\n${summaryTable}`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
